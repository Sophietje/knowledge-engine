# baseURI: https://www.tno.nl/energy/ontology/interconnect

@prefix : <https://www.tno.nl/energy/ontology/interconnect#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://purl.org/dc/terms/created>
  a owl:AnnotationProperty ;
.
<http://purl.org/dc/terms/creator>
  a owl:AnnotationProperty ;
.
<http://purl.org/dc/terms/title>
  a owl:AnnotationProperty ;
.
<https://www.tno.nl/energy/ontology/interconnect>
  a owl:Ontology ;
  <http://purl.org/dc/terms/created> "2020-11-16T13:31:00"^^xsd:dateTime ;
  <http://purl.org/dc/terms/creator> "Barry Nouwt" ;
  <http://purl.org/dc/terms/creator> "Han Kruiger" ;
  <http://purl.org/dc/terms/creator> "Wilco Wijbrandi" ;
  <http://purl.org/dc/terms/title> "Knowledge Base Ontology" ;
.
:ActuationPurpose
  a owl:Class ;
  rdfs:comment """This purpose should be required when an actuation has to be done. E.g., if a UI wants to set a power limit to a subnet, it should require the ActuationPurpose.
If a Knowledge Base can enact the actuation it satisfies the purpose. E.g., when a knowledge base can switch a lamp on or off.""" ;
  rdfs:subClassOf :Purpose ;
.
:AnswerKnowledgeInteraction
  a owl:Class ;
  rdfs:comment "An answer knowledge interaction is a declaration that specifies the shape of knowledge that is available in the knowledge base."@en ;
  rdfs:subClassOf :KnowledgeInteraction ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:onClass :BaseGraphPattern ;
      owl:onProperty :hasGraphPattern ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
:ArgumentGraphPattern
  a owl:Class ;
  rdfs:label "Argument graph pattern" ;
  rdfs:subClassOf :BaseGraphPattern ;
.
:AskKnowledgeInteraction
  a owl:Class ;
  rdfs:comment "An ask knowledge interaction declares the shape of knowledge that a knowledge base possibly asks its smart connector for."@en ;
  rdfs:subClassOf :KnowledgeInteraction ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:onClass :BaseGraphPattern ;
      owl:onProperty :hasGraphPattern ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
:BaseGraphPattern
  a owl:Class ;
  rdfs:comment "A graph pattern is used for describing knowledge. It uses basic graph pattern (BGP) from the SPARQL specification which includes terms from the ontology combined with variables." ;
  rdfs:seeAlso "https://www.w3.org/TR/rdf-sparql-query/#BasicGraphPatterns"^^xsd:anyURI ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty :hasPattern ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
:ChangedKnowledgePurpose
  a owl:Class ;
  rdfs:comment "The purpose is to inform (or be informed) about knowledge that is updated. (Vaguely the 'U' in CRUD.)"@en ;
  rdfs:subClassOf :InformPurpose ;
.
:CommunicativeAct
  a owl:Class ;
  rdfs:comment "The communicative act is part of a Knowledge Interaction and describes the purposes of why data is exchanged. It distinguishes between the purposes it requires and the purposes it satisfies."@en ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:onClass :Purpose ;
      owl:onProperty :hasRequirement ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:onClass :Purpose ;
      owl:onProperty :hasSatisfaction ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
:ConversionPurpose
  a owl:Class ;
  rdfs:comment "The purpose of the knowledge interaction is to convert knowledge to a different representation. (E.g., converting Fahrenheit to Celsius.)"@en ;
  rdfs:subClassOf :Purpose ;
.
:GraphPattern
  a owl:Class ;
  rdfs:label "Graph pattern" ;
  rdfs:subClassOf :BaseGraphPattern ;
.
:InformPurpose
  a owl:Class ;
  rdfs:comment "The purpose is to inform or be informed about changes in (availability of) knowledge. (Vaguely CRUD.)"@en ;
  rdfs:subClassOf :Purpose ;
.
:KnowledgeBase
  a owl:Class ;
  rdfs:comment """A knowledge base is a 'thing' that (through knowledge interactions) has a contract with its smart connector about how it exchanges knowledge.

Examples include:

- a database
- a weather station
- a machine learning model
- a GUI that is presented to a human to make decisions"""@en ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass :SmartConnector ;
      owl:onProperty :hasSmartConnector ;
    ] ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass :ServiceDescription ;
      owl:onProperty :consumesService ;
    ] ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
      owl:onClass :ServiceDescription ;
      owl:onProperty :providesService ;
    ] ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty :hasDescription ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty :hasName ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:onProperty :hasKnowledgeInteraction ;
      owl:someValuesFrom :KnowledgeInteraction ;
    ] ;
.
:KnowledgeInteraction
  a owl:Class ;
  rdfs:comment "A knowledge interaction is a declaration of how a knowledge base interacts with its smart connector."@en ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onDataRange xsd:string ;
      owl:onProperty :hasName ;
    ] ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:onClass :CommunicativeAct ;
      owl:onProperty :hasCommunicativeAct ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:onDataRange xsd:boolean ;
      owl:onProperty <https://www.tno.nl/energy/ontology/interconnect/isMeta> ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
:NewKnowledgePurpose
  a owl:Class ;
  rdfs:comment "The purpose is to inform (or be informed) about knowledge that is created. (Vaguely the 'C' in CRUD.)"@en ;
  rdfs:subClassOf :InformPurpose ;
.
:PeriodicPurpose
  a owl:Class ;
  rdfs:comment "The purpose is to periodically exchange knowledge through the interaction. E.g., hourly measurements."@en ;
  rdfs:subClassOf :Purpose ;
  owl:disjointWith :WhenChangedPurpose ;
.
:PostKnowledgeInteraction
  a owl:Class ;
  rdfs:comment "A post knowledge interaction declares that this knowledge base can initiate an interaction where it sends some knowledge (matching the argument graph pattern) to its smart connector, and expects as a result some other knowledge (matchin the result graph pattern)."@en ;
  rdfs:seeAlso :ReactKnowledgeInteraction ;
  rdfs:subClassOf :KnowledgeInteraction ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass :ResultGraphPattern ;
      owl:onProperty :hasGraphPattern ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:onClass :ArgumentGraphPattern ;
      owl:onProperty :hasGraphPattern ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
:Purpose
  a owl:Class ;
  rdfs:comment "The purpose of a particular exchange of information from the perspective of a KnowledgeBase. The purpose is used to define the purposes a communicative act requires and the purposes a communicative act satisfies. These together allow the Knowledge Engine to determine whether two Knowledge Interactions match or not." ;
.
:ReactKnowledgeInteraction
  a owl:Class ;
  rdfs:comment "A react knowledge interaction declares that this knowledge base can respond to an interaction where it receives some knowledge (matching the argument graph pattern) from its smart connector, and is expected to give as a result some other knowledge (matching the result graph pattern)."@en ;
  rdfs:seeAlso :PostKnowledgeInteraction ;
  rdfs:subClassOf :KnowledgeInteraction ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass :ResultGraphPattern ;
      owl:onProperty :hasGraphPattern ;
    ] ;
  rdfs:subClassOf [
      a owl:Restriction ;
      owl:onClass :ArgumentGraphPattern ;
      owl:onProperty :hasGraphPattern ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
:RemovedKnowledgePurpose
  a owl:Class ;
  rdfs:comment "The purpose is to inform (or be informed) about knowledge that is removed. (Vaguely the 'D' in CRUD.)"@en ;
  rdfs:subClassOf :InformPurpose ;
.
:ResultGraphPattern
  a owl:Class ;
  rdfs:label "Result graph pattern" ;
  rdfs:subClassOf :BaseGraphPattern ;
.
:RetrieveKnowledgePurpose
  a owl:Class ;
  rdfs:comment "The purpose is retrieving knowledge (or being retrieved). (Vaguely the 'R' in CRUD.)"@en ;
  rdfs:subClassOf :InformPurpose ;
.
:ServiceDescription
  a owl:Class ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass :KnowledgeInteraction ;
      owl:onProperty :consumerImplementsKnowledgeInteraction ;
    ] ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
      owl:onClass :KnowledgeInteraction ;
      owl:onProperty :providerImplementsKnowledgeInteraction ;
    ] ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty :hasDescription ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty :hasName ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
:SmartConnector
  a owl:Class ;
  owl:equivalentClass [
      a owl:Restriction ;
      owl:onDataRange xsd:string ;
      owl:onProperty :hasEndpoint ;
      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
    ] ;
.
:WhenChangedPurpose
  a owl:Class ;
  rdfs:comment "The purpose of the knowledge exchange is to only send updates when the knowledge changes. E.g., to only send a message when a toggle is toggled."@en ;
  rdfs:subClassOf :Purpose ;
.
:consumerImplementsKnowledgeInteraction
  a owl:ObjectProperty ;
.
:consumesService
  a owl:ObjectProperty ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
:hasCommunicativeAct
  a owl:ObjectProperty ;
  rdfs:domain :KnowledgeBase ;
  rdfs:range :CommunicativeAct ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
:hasData
  a owl:DatatypeProperty ;
  rdfs:comment """This property bridges the gap between metadata and data. 

It is not meant to be used in actual descriptions of knowledge bases. Instead, it is meant to be used in the Recipient Selector of the Developer API to indicate that the Knowledge Base wants to send a message to other Knowledge Bases with a certain property where this property is described in terms of the domain. So, for example, a Knowledge Base wants to send a message to all other Knowledge Bases that gave 24 degrees celsius as the temperature of a particular room.""" ;
.
:hasDescription
  a owl:DatatypeProperty ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
:hasEndpoint
  a owl:DatatypeProperty ;
.
:hasGraphPattern
  a owl:ObjectProperty ;
  rdfs:domain :KnowledgeInteraction ;
  rdfs:range :BaseGraphPattern ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
:hasKnowledgeInteraction
  a owl:ObjectProperty ;
  rdfs:domain :KnowledgeBase ;
  rdfs:range :KnowledgeInteraction ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
:hasName
  a owl:DatatypeProperty ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
:hasPattern
  a owl:DatatypeProperty ;
  rdfs:domain :BaseGraphPattern ;
  rdfs:range xsd:string ;
.
:hasPurpose
  a owl:ObjectProperty ;
  rdfs:subPropertyOf owl:topObjectProperty ;
.
:hasRequirement
  a owl:ObjectProperty ;
  rdfs:subPropertyOf :hasPurpose ;
  owl:propertyDisjointWith :hasSatisfaction ;
.
:hasSatisfaction
  a owl:ObjectProperty ;
  rdfs:subPropertyOf :hasPurpose ;
.
:hasSmartConnector
  a owl:ObjectProperty ;
.
:providerImplementsKnowledgeInteraction
  a owl:ObjectProperty ;
.
:providesService
  a owl:ObjectProperty ;
.
<https://www.tno.nl/energy/ontology/interconnect/isMeta>
  a owl:DatatypeProperty ;
  rdfs:comment "This property indicates whether the KnowledgeInteraction it is attached to is a meta interaction that is used for internal Knowledge Engine communication, or whether it is not a meta interaction indicating that it is a capability of the actual KnowledgeBase it is attached to." ;
  rdfs:subPropertyOf owl:topDataProperty ;
.
[
  a owl:AllDisjointClasses ;
  owl:members (
      :AnswerKnowledgeInteraction
      :AskKnowledgeInteraction
      :PostKnowledgeInteraction
      :ReactKnowledgeInteraction
    ) ;
].
